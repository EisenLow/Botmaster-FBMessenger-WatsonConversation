'use strict';var R=require('ramda'),_require=require('async'),parallel=_require.parallel,series=_require.series,apply=_require.apply,_require2=require('./actions'),getTasks=_require2.getTasks,__isPendingActions=_require2.isPendingActions,evalResponse=_require2.evalResponse,__parse=require('posthtml-parser'),render=require('posthtml-render'),debug=require('debug')('botmaster:ware:fulfill:parse'),parseOptions={xmlMode:!0,recognizeSelfClosing:!0,normalizeWhitespace:!1,decodeEntities:!1},parse=function(a){return __parse(a,parseOptions)},isPendingActions=function(a,b){return __isPendingActions(parse(a),b)},fulfill=function(a,b,c,d,e){e||(e=d,d=parse(c)),debug('Got tree '+JSON.stringify(d));var f=getTasks(d,a,b);debug('Got '+f.parallel.length+' parallel tasks and '+f.series.length+' serial tasks'),parallel([apply(parallel,f.parallel),apply(series,f.series)],function(g,h){if(g)e(g);else{R.forEach(R.curry(evalResponse)(d,R.__),R.compose(R.filter(R.propSatisfies(function(j){return'step'!==j},'evaluate')),R.flatten)(h)),debug('tree is now '+JSON.stringify(d));var i=render(d);d=parse(i),__isPendingActions(d,a)?(debug('recursing response '+i),fulfill(a,b,i,d,e)):(debug('final response '+i),e(null,i))}})};module.exports={fulfill:fulfill,isPendingActions:isPendingActions};